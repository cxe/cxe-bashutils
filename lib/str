#!/usr/bin/env bash

# Utility library for dealing with strings and text

declare -F str &>/dev/null || {
    str() {
        local ref_name
        [[ "$1" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]] && local -r ref_name="$1" && local -n ref_data="$1" && shift
        [ "$ref_name" ] || return 1
        local -r cmd="$1" && shift
        case "$cmd" in
            length)
                echo "${#ref_data}" ;;
            replace)
                ref_data="${ref_data//"$1"/"$2"}" ;;
            uppercase)
                ref_data="${ref_data^^}" ;;
            lowercase)
                ref_data="${ref_data,,}" ;;
            trim)
                local ref=""; [ "$1" == -n ] && { ref="$1" && declare -n v="$2"; shift 2; } || local v
                local ban=$'\r\n\t\f\v '
                [ $# -gt 1 ] && ban="$1" && shift
                v="${1#"${1%%[!$ban]*}"}"
                v="${v%"${v##*[!$ban]}"}"
                [ "$ref" ] || echo "$v" ;;
            repeat) # @usage `declare l && str repeat $l 80 -; echo $l`
                local ref=""; [ "$1" == -n ] && { ref="$1" && declare -n var="$2"; shift 2; } || local var
                (( $1 < 1 )) && return 1
                var="$2" && while (( ${#var} < $1 )); do var+="$var"; done
                var="${var:0:$1}"
                [ "$ref" ] || echo -n "$var" ;;
            split)
                local parts; IFS="$2" read -ra parts <<< "$1"
                printf "%s\n" "${parts[@]}" ;;
            slugify)
                local v="$1"
                v=$(echo "$v" | tr '[:upper:]' '[:lower:]') # Convert to lowercase
                v=$(echo "$v" | sed -E 's/æ/ae/g; s/œ/oe/g; s/ﬁ/fi/g; s/ﬂ/fl/g;')

                # Replace diacritics (including German Umlauts)
                v=$(echo "$v" | sed -E '
                    s/[àáâãäåāăą]/a/g;
                    s/[çćčĉċ]/c/g;
                    s/[ďđ]/d/g;
                    s/[èéêëēėęě]/e/g;
                    s/[ƒ]/f/g;
                    s/[ĝğġģ]/g/g;
                    s/[ĥħ]/h/g;
                    s/[ìíîïīĩĭįı]/i/g;
                    s/[ĵ]/j/g;
                    s/[ķĸ]/k/g;
                    s/[ĺļľŀł]/l/g;
                    s/[ñńņňŋ]/n/g;
                    s/[òóôõöøōő]/o/g;
                    s/[ŕŗř]/r/g;
                    s/[śŝşš]/s/g;
                    s/[ţťŧ]/t/g;
                    s/[ùúûüũūŭůűų]/u/g;
                    s/[ŵ]/w/g;
                    s/[ýÿŷ]/y/g;
                    s/[žźż]/z/g;
                    s/[ß]/ss/g;
                ')

                v=$(echo "$v" | sed -E 's/[^a-z0-9]+/-/g')
                v=$(echo "$v" | sed -E 's/-+/-/g; s/^-|-$//g')
                echo "$v"
                ;;
            random) # Generate a secure random string
                LC_ALL=C tr -dc "${2:-'A-Za-z0-9!@#$%^&*()_+'}" </dev/urandom | head -c "$1" ;;
            to_base64)
                echo -n "$*" | base64 ;;
            from_base64)
                echo -n "$*" | base64 --decode ;;
            hash|sha256)
                echo -n "$*" | sha256sum | awk '{print $1}' ;;
            is_ip)
                [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] ;;
            is_email)
                [[ "$1" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]] ;;
            *)
                echo "Error: Unknown command '$cmd'" >&2; return 1 ;;
        esac
    }
}

# Execute only if not sourced
[[ "${BASH_SOURCE[0]}" == "$0" ]] && [ "$*" ] && str "$@"
