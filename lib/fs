#!/usr/bin/env bash

[ "$default_scheme_port" ] || {

  source "${BASH_SOURCE[0]%/*}/core"

  declare -gxrA default_scheme_port=(
    [dns]=53
    [ftp]=21
    [git]=9418
    [http]=80
    [https]=443
    [imap]=143
    [irc]=194
    [ircs]=6697
    [ldap]=389
    [ldaps]=636
    [mysql]=3306
    [nfs]=111
    [pop]=110
    [postgres]=5432
    [redis]=6379
    [sftp]=22
    [smb]=445
    [snmp]=161
    [ssh]=22
    [svn]=3690
    [telnet]=23
    [ws]=80
    [wss]=443
  )

  is_dir(){ [ -d "$1" ]; }

  is_link(){ [ -L "$1" ]; }

  is_file(){ [ -f "$1" ]; }

  # @alias exists
  is_fso(){ [ -e "$1" ]; }

  # parse elements of a URL into an array
  # @usage declare -A f; url_parse -n f "https://un:pw@Sup.Sub.Example.Com:8443/path/File.ext#Anchor?q=1&l=en"
  url_parse(){
    declare -a nameref=(); [ "$1" == -n ] && { declare -n result="$2"; read -ra nameref < <( declare -p "$2" 2>/dev/null ); shift 2; } || declare -A result; declare -r nameref
    result=([scheme]="" [user]="" [pass]="" [host]="" [port]="" [path]="" [frag]="" [query]="" [hostname]="" [domain]="" [subdomain]="" [tld]="" [ext]="" [file]="" [href]="") && local tmp="$1"

    if [[ "$tmp" == *\#* ]]; then
      result[frag]="${tmp#*$'#'}"
      tmp="${tmp%%$'#'*}"
      if [[ "${result[frag]}" == *\?* ]]; then
        result[query]="${result[frag]#*$'?'}"
        result[frag]="${result[frag]%%$'?'*}"
      fi
    elif [[ "$tmp" == *\?* ]]; then
      result[query]="${tmp#*$'?'}"
      tmp="${tmp%%$'?'*}"
    fi

    if [[ "$tmp" == *://* ]]; then
      result[scheme]="${tmp%%:*}" && result[scheme]="${result[scheme],,}"
      tmp="${tmp:((${#result[scheme]}+3))}"
    elif [ -e "$tmp" ]; then
      result[scheme]="file"
    fi

    case "${result[scheme]}" in
      '') return 1;;
      file)
        result[path]="$tmp";;
      http|https|ftp|sftp)
        result[path]="/${tmp#*\/}"
        result[host]="${tmp%%\/*}"

        # extract credentials
        if [[ "${result[host]}" == *@* ]]; then
          result[user]="${result[host]%%@*}"
          if [[ "${result[user]}" == *:* ]]; then
            result[pass]="${result[user]#*:}"
            result[user]="${result[user]%%:*}"
          fi
          result[host]="${result[host]#*@}"
        fi
        result[host]="${result[host],,}"
        result[hostname]="${result[host]%%:*}"

        # extract port
        if [[ "${result[host]}" == *:* ]]; then
          result[port]="${result[host]#*:}"
        else
          result[port]="${default_scheme_port["${result[scheme]}"]}"
        fi

        result[tld]=".${result[hostname]##*.}"
        result[domain]="${result[hostname]%.*}" && result[domain]="${result[domain]##*.}${result[tld]}"
        result[subdomain]="${result[hostname]//.${result[domain]}/}"
        ;;
    esac

    # normalize path
    [[ "${result[path]:-1}" == / ]] || result[file]="${result[path]##*$'/'}"
    result[ext]=".${result[file]##*.}"

    # normalized href
    tmp="${result[scheme]}://"
    if [ "${result[user]}" ]; then
      tmp="$tmp${result[user]}"
      [ "${result[pass]}" ] && tmp="$tmp:${result[pass]}"
      tmp="$tmp@"
    fi
    tmp="$tmp${result[host]}${result[path]}"
    [ "${result[query]}" ] && tmp="$tmp?${result[query]}"
    [ "${result[frag]}" ] && tmp="$tmp#${result[frag]}"
    result[href]="$tmp"

    [ "$nameref" ] || echo "${result[@]}"
  }

  # @return a) string, scheme of URL (or "file" if filename exists)
  #         b) if multiple params are given returns 0 only if type of first param matches one of the provided others
  # @param: URL or filename
  # @param(s): URL types to check for match
  # @effect sets global variables: url_type, url_data, url_user, url_pass, url_host, url_port, url_path, url_query
  # @alias is_url parse_url
  # @usage `if url_type "$url" file http ftp; then ...`
  url_type(){
    declare url && url_parse -n url "$1" && shift
    [ "${result[scheme]}" ] || return 1
    if [ "$#" -eq 0 ]; then
      echo "${result[scheme]}"
    else
      local t && for t; do [ "${t,,}" == "${result[scheme]}" ] && return; done
      return 2
    fi
  }

  # @usage `declare file && while file_list -n file "$DIR" '*.*'; do echo "$file"; done`
  file_list(){
    declare -a nameref=(); [ "$1" == -n ] && { declare -n result="$2"; read -ra nameref < <( declare -p "$2" 2>/dev/null ); shift 2; } || declare result; declare -r nameref

    [ "$file_list_dir" ] || {
      declare -gx file_list=() file_list_dir="${1:-"$PWD"}"
      while IFS= read -r -d '' f; do file_list+=("$f"); done < <( find "${1:-$PWD}" -name "${2:-*}" -type f -print0 )
    }

    if [ ${#file_list} == 0 ]; then
      unset result file_list file_list_dir
      return 2
    fi

    local pathname="${file_list[0]}" && file_list=("${file_list[@]:1}")
    if [[ "${nameref[1]}" == *A* ]]; then
      result[pathname]="$pathname"
      result[basename]="${pathname##*/}"
      result[path]="${pathname%/*}"
      result[name]="${result[basename]%%.*}"
      result[ext]="${result[basename]#*.}"; if [ "${result[ext]}" == "${result[basename]}" ]; then result[ext]=""; else result[ext]=".${result[ext]}"; fi
      [ -d "$pathname" ] && result[type]="/" || { result[type]="${result[ext]##*.}"; result[type]="${result[type],,}"; [ "${result[type]}" ] && result[type]=".${result[type]}"; }
    else
      result="$pathname"
    fi

    [ "$nameref" ] || echo "${result[@]}"
  }

  # @alias extract, unarchive, expand
  fs_uncompress() {
    [ -f "$1" ] || return 2
    case $1 in
        *.tar.bz2|*.tbz2)  tar xvjf $1 && return;;
        *.tar.gz|*.tgz)    tar xvzf $1 && return;;
        *.bz2)             bunzip2 $1 && return;;
        *.rar)             unrar x $1 && return;;
        *.gz)              gunzip $1 && return;;
        *.tar)             tar xvf $1 && return;;
        *.zip)             unzip $1 && return;;
        *.Z)               uncompress $1 && return;;
        *.7z)              7z x $1 && return;;
    esac
    return 3
  }

  # @usage: `dir_containing [--stop=<dir>] <sub-path-to-find>`
  # @params: 1) (sub-)filename to find, 2) starting-dir (defaults to PWD)
  # @options: --stop=<dir> directory where to stop searching (default: <root>)
  # @return: directory-path (where the (sub-)filename was found),
  #          otherwise empty string (along with a non-zero errorcode)
  # @throws: #2 if called without parameters, #4 if not found
  # @alias:  upfind, find_upward, fs_dir_including
  dir_containing() {
      local stop=""; [[ "$1" = --stop=* ]] && { stop="$( realpath "${1/--stop=/}" )"; shift; }
      [ "$1" ] || return 2
      local d; d="$( realpath "${2:-"$PWD"}" )"
      while [ "$d" ] && [ "$d" != "$stop" ] && [ ! -e "$d/$1" ]; do d="${d%/*}"; done
      [ -e "$d/$1" ] && echo "${d:-/}" || return 4
  }

  # @usage FOO="$(fs_uward foo.txt)"
  # @alias readUpwardFile findUpwardFile
  fs_upward() {
      echo "$(f=/$1; d="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 || exit $? ; pwd -P )"; while [ "$d" != "/" ]; do [ -f "$d$f" ] && { echo "$d$f"; return; }; d="$(dirname "$d")"; done)"
  }

  # download a file (unzip gz)
  # todo: option --unzip
  # todo: tar -xf archive.tar.gz
  download(){
    declare -A url && url_parse -n url "$1"
    declare fso="${2:-$PWD}"
    while true; do
        if [ -f "$fso" ]; then
            return 2
        elif [ -d "$fso" ]; then
            fso="$fso/${url[file]}"
            continue
        else
            break
        fi
    done

    if [ "${url[ext]}" == ".gz" ] && [[ "$fso" != *.gz ]]; then
        curl -skLo - "${url[href]}" | gunzip >> "$fso"
    else
        curl -skLo "$fso" "${url[href]}"
    fi
  }
}
