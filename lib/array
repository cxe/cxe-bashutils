#!/usr/bin/env bash

# helper function for working with arrays
# @usage:
# - define an array with initial items:      array MYARRAY = "item 0" [...item-n]
# - append one or more items:    array MYARRAY push item-0 [,...item-n]
# - prepend item(s) to beginning of array:   array unshift MYARRAY item-0 [,...item-n]
# - remove all items:    array clear MYARRAY
# - remove item(s) from beginning of array:   array pop MYARRAY [amount]
# - print array / hashmap contents to stdout:    array_print MYARRAY
# - check if variable is an array/hashmap:    array MYARRAY exists
# - remove item(s) from end of array:    array pop MYARRAY [amount] => ARRAY_ITEM contains popped items and array length reduced by amount
#
# e.g.: array A = "0 1" 2 34 && array A print
declare -F array &>/dev/null || {
    array(){
        local result_var; [[ "$1" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]] && readonly result_var="$1"
        [ "$result_var" ] && { local -n result="$1" && shift; } || return 1
        local type; readarray -d " " -t type < <( declare -p "$result_var" 2>/dev/null );
        if [[ ${type[1]} == *A* ]]; then type=o; elif [[ ${type[1]} == *a* ]]; then type=a; fi
        local -r cmd="$1" && shift
        case "$cmd" in
            =)
                result=("$@") ;;
            push|append)
                [ $# == 0 ] || result=("${result[@]}" "$@") ;;
            pop)
                declare -agx removed_items=();
                local -i count=${1:-1} max=${#result[@]}
                [[ $count -gt $max ]] && count=$max
                if [[ $count -gt 0 ]]; then
                    removed_items=("${result[@]:((0-$count))}")
                    result=("${result[@]:0:(($max-count))}")
                fi ;;
            unshift|prepend)
                [ $# == 0 ] || result=("$@" "${result[@]}") ;;
            clear|empty)
                result=() ;;
            unique)
                ;; # TODO
            join|concat)
                local d="${1:-" "}"; printf '%s' "${result[@]/#/$d}";;
            print)
                case "$type" in
                    o) open='{'; close='}';;
                    a) open='['; close=']';;
                    *) echo "${!result}" && return;;
                esac
                echo -n "$result_var = $open"
                local k; for k in "${!result[@]}"; do echo -en "\n  [$k]: ${result["$k"]}"; done
                [ "${#result[@]}" == 0 ] && echo $close || echo -e "\n$close" ;;
            shift)
                declare -agx removed_items=();
                local -i count=${1:-1} max=${#result[@]}
                [[ $count -gt $max ]] && count=$max
                if [[ $count -gt 0 ]]; then
                    removed_items=("${result[@]:0:$count}")
                    result=("${result[@]:$count:((${#result[@]}-count))}")
                fi ;;
            indexof)
                declare -ig array_indexof=${#result[@]}
                while ((--array_indexof > -1)); do [ "${result[i]}" == "$1" ] && return 0; done
                return 2 ;;
            exists|is_array)
                [ "$type" ] ;;
        esac
    }
}
