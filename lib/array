#!/usr/bin/env bash

source "${BASH_SOURCE[0]%/*}/typeof"

# @usage:
# - define an array with initial items:      array MYARRAY = "item 0" [...item-n]
# - append one or more items:    array MYARRAY push item-0 [,...item-n]
# - prepend item(s) to beginning of array:   array unshift MYARRAY item-0 [,...item-n]
# - remove all items:    array clear MYARRAY
# - remove item(s) from beginning of array:   array pop MYARRAY [amount]
# - print array / hashmap contents to stdout:    array_print MYARRAY
# - remove item(s) from end of array:    array pop MYARRAY [amount] => ARRAY_ITEM contains popped items and array length reduced by amount
#
# e.g.: array A = "0 1" 2 34 && array A print
if typeof array != callable; then
    array(){
        typeof "$1" is varname && local -r result_var="$1" && local -n result="$1" && shift
        local -r cmd="$1" && shift
        case "$cmd" in
            =)
                result=("$@") ;;
            push|append)
                [ $# == 0 ] || result=("${result[@]}" "$@");;
            pop)
                declare -agx removed_items=(); declare -ir count=${1:-1}
                if [[ $count -gt 0 ]]; then
                    removed_items=("${result[@]:((0-$count))}")
                    result=("${result[@]:0:((${#result[@]}-count))}")
                fi ;;
            unshift|prepend)
                [ $# == 0 ] || result=("$@" "${result[@]}");;
            clear|empty)
                result=();;
            unique)
                ;; # TODO
            join|concat)
                declare d="${1:-" "}"; printf '%s' "${result[@]/#/$d}";;
            print)
                is_array "$result_var" || { echo "${!result}" && return; };
                declare k; for k in "${!result[@]}"
                    do echo "[$k]: ${result["$k"]}"
                done ;;
            shift)
                declare -agx removed_items=(); declare -ir count=${1:-1}
                if [[ $count -gt 0 ]]; then
                    removed_items=("${result[@]:0:$count}")
                    result=("${result[@]:$count:((${#result[@]}-count))}")
                fi ;;
            indexof)
                declare -ig array_indexof=${#result[@]}
                while ((--array_indexof > -1)); do [ "${result[i]}" == "$1" ] && return 0; done
                return 2 ;;
        esac
    }

  # return error if not an array variable (either hashmap or indexed)
  # @usage:   is_array FOO && echo "the array $_ has ${#FOO[@]} item(s) " || echo "variable value is";
  # @see typeof
  is_array(){ declare -n nameref="$1" 2>/dev/null || return 1; [[ "${#nameref[@]}" -gt 1 ]] && return 0; declare tmp=() && readarray -d " " -t "$tmp" < <( declare -p "$1" ); [[ ${tmp[1],,} == *a* ]]; }

fi
