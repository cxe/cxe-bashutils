#!/usr/bin/env bash

declare -F log &>/dev/null || {
  
  declare -gx LOG_COLOR=false && [ -t 1 ] && [[ "$TERM" == *color* ]] && LOG_COLOR=true
  declare -gxi LOG_LEVEL=0
  declare -gxA log_level=() log_style=();
  log_style(){
    log_level["$1"]=$2
    [ $LOG_COLOR ] && log_style["$1"]="\033[38;2;${4//,/;}m$3 " || log_style["$1"]="$3 ";
  }
  log_style --code 0 âž² 91,155,213 # detailed information for debugging
  log_style --exec 0 â–¸ 91,155,213 # detailed information for debugging
  log_style --note 1 â€¢ 80,80,80
  log_style --info 1 ðŸ›ˆ 13,82,156 # informative events
  log_style --good 2 âœ” 112,192,80 # confirmation
  log_style --warn 2 âš  255,192,0 # warning unexpected events that may lead to errors
  log_style --fail 3 ðŸ—² 255,51,0 # error events that prevent some functionalities from working
  log_style --dire 4 âœ˜ 192,0,0 # critical events that require intervention to prevent system failure
  log_style --dead 5 â˜  128,0,32 # fatal events that indicate a system component is inoperable

  # write a (colored) message to stderr
  # @usage: log <level> <message>
  #         Example - logging specific command: `log --exec ls -la`
  log(){
    local style title detail type && [ "${log_level[$1]}" ] && type="$1" && style="${log_style["$1"]}" && shift
    [ "$type" != --exec ] && (( LOG_LEVEL >= "${log_level[$type]}" )) && return 0
    title="$*"
    if [ "$type" == --exec ]; then
      detail=$( "$@" 2>&1 )
      [ $? == 0 ] && style="${log_style[--good]}" || style="${log_style[--fail]}"
    elif [[ $# == 1 ]]; then
      echo -e "${style}${title}${style+\033[0m}" >&2
    else
      echo -e "${style}\033[1m$1\033[22m\n\t${@:2}${style+\033[0m}" >&2
    fi
    [[ "${log_level[$type]}" -gt 2 ]] && exit
  }
}
