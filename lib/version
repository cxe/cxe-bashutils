#!/usr/bin/env bash

declare -F version_parse >/dev/null 2>/dev/null || {

    # parse version string
    # @see https://semver.org/
    # @usage: declare -A v && version_parse -n v 1.23.456-pre.release+build.branch && array_print v
    version_parse(){
        declare -a nameref=(); [ "$1" == -n ] && { declare -n result="$2"; read -ra nameref < <( declare -p "$2" 2>/dev/null ); shift 2; } || declare result; declare -r nameref
        result=([version]="$1") && local tmp="$1"
        [[ "$tmp" == *+* ]] && result[build]="${tmp#*+}" && tmp="${tmp%%+*}" # dot-separated build identifiers
        [[ "$tmp" == *-* ]] && result[prerelease]="${tmp#*-}" && tmp="${tmp%%-*}" # dot-separated pre-release identifiers
        result[core]="$tmp" && result[major]="${tmp%%.*}"
        [[ "$tmp" == *.* ]] && tmp="${tmp#*.}" && result[minor]="${tmp%%.*}"
        [[ "$tmp" == *.* ]] && tmp="${tmp#*.}" && result[patch]="${tmp%%.*}"
    }

    # check if version matches rules
    # @usage: version_compatible 2.1.3 '~1.4.0 || ^2.0.0 ' && echo compatible || echo incompatible
    # rules: ~ allow patches, ^ allow minor and patches, * allow anything, >, <, ||
    version_compatible(){
        declare -A v && version_parse -n v "$1" && shift && declare -a t=() # tokens
        declare rules="${*//[[:space:]]-[[:space:]]/—}" && rules="${rules//[[:space:]]/}"
        declare -i k=0 i=0 n=${#rules}
        while (( i<n )); do
            if [[ "${rules:k:2}" == @('||'|'>='|'<=') ]]; then ((i+=2))
            elif [[ "${rules:i:1}" == @(^|~|>|<|$'\*'|—) ]]; then ((++i))
            elif [[ "${rules:i:1}" == @([[:digit:]]|[[:alpha:]]|.|+|-) ]]; then
                while [[ "${rules:i:1}" == @([[:digit:]]|[[:alpha:]]|.|+|-) ]]; do ((++i)); done
            else ((++i)); fi
            t+=("${rules:$k:((i-k))}")
            k=i
        done

        declare lt eq gt && declare -A m=();
        for ((i=0, n=${#t[@]}; i<n; ++i)); do
            lt="" eq="" gt=""
            if [[ "${t[i]:0:1}" == [[:digit:]] ]]; then
                version_parse -n m "${t[i]}" && eq=1
            elif [[ "${t[((i+1))]:0:1}" == [[:digit:]] ]]; then
                version_parse -n m "${t[((i+1))]}"
                local -i v0="${v[major]}" v1="${v[minor]}" v2="${v[patch]}"
                local -i m0="${m[major]}" m1="${m[minor]}" m2="${m[patch]}"
                set -x
                case "${t[i]}" in
                    '—') eq=eq && lt=lt ;;
                    '<=') eq=eq && lt=lt ;;
                    '<') lt=lt ;;
                    '>=') eq=eq && gt=gt ;;
                    '>') gt=gt ;;
                    '*') return;;
                    '^') (( v0 == m0 )) && return ;;
                    '~') (( v0 == m0 )) && (( v1 == m1 )) && return ;;
                    '||') ;;
                esac
                [ "$eq" ] && [ "${v[core]}" == "${m[core]}" ] && return
                [ "$lt" ] && (( v0 < m0 )) && return; (( v0 == m0 )) && { (( v1 < m1 )) && return; (( v1 == m1 )) && (( v2 < m2 )) && return; }
                [ "$gt" ] && (( v0 > m0 )) && return; (( v0 == m0 )) && { (( v1 > m1 )) && return; (( v1 == m1 )) && (( v2 > m2 )) && return; }
            fi
        done
        return 2
    }

}
version_compatible 2.3.3 '1.4.0 - 2.0.0 ' && echo compatible || echo incompatible
