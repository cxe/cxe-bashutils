#!/usr/bin/env bash

# Define the sys function only if it does not exist
declare -F sys &>/dev/null || {
  sys() {
    case "$1" in
      type) # Check OS type (linux, win, mac, etc.)
        local os="${OSTYPE,,}"
        case "${2,,}" in
          mac|darwin|ios) [[ $os == darwin* ]] ;;
          linux|unix) [[ $os == *linux* || $os == *bsd* || $os == *solaris* || $os == *android* || $os == *gnu* ]] ;;
          win) [[ $os == *cygwin* || $os == *mingw* ]] ;;
          *) [[ $os == $2* ]] ;;
        esac
        return $? ;;

      command) # Check if a command is installed
        type -t -- "$2" &>/dev/null && return 0 || return 1 ;;

      arch) # Get OS architecture
        uname -m ;;

      path_bin) # Check if a command is a binary in PATH
        command -v "$2" &>/dev/null ;;

      ip) # Get public IP
        curl -s "https://ipinfo.io/ip" ;;

      portscan) # Scan open ports on a host (without nmap)
        for port in {1..1000}; do
          (echo >/dev/tcp/$2/$port) &>/dev/null && echo "Port $port is open"
        done ;;

      cpu) # Get CPU info
        grep -m1 'model name' /proc/cpuinfo 2>/dev/null || sysctl -n machdep.cpu.brand_string ;;

      memory) # Get memory usage
        free -h 2>/dev/null || vm_stat | awk '/Pages free|Pages active/ {print $0}' ;;

      memtop) # display top 10 processes by memory usage
        ps aux --sort=-%mem | awk 'NR<=10{print $0}' ;;

      disk) # Get disk usage
        df -h / ;;

      process) # Check if a process is running
        pgrep -x "$2" &>/dev/null && echo "Process '$2' is running" || echo "Process '$2' not found" ;;

      os) # Get OS version
        uname -a ;;

      network) # Get local network info
        ip -4 addr show scope global 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' || ifconfig 2>/dev/null | awk '/inet / {print $2}' ;;

      # Check SSL certificate expiration date
      ssl_expiry)
        local domain="$1"
        echo | openssl s_client -servername "$domain" -connect "$domain:443" 2>/dev/null | openssl x509 -noout -dates
        ;;

      ssh_connect) # with key
        local user="$1"
        local host="$2"
        local key="${3:-$HOME/.ssh/id_rsa}"
        ssh -i "$key" "$user@$host"
        ;;

      *) echo "Usage: sys [type|command|arch|path_bin|ip|portscan|cpu|memory|disk|process|user|os|network]"; return 1 ;;
    esac
  }
}

# Execute only if not sourced
[[ "${BASH_SOURCE[0]}" == "$0" ]] && [ "$*" ] && sys "$@"
