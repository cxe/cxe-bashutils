#!/usr/bin/env bash

##
# sys_arch function (53061f8419b4f52bdade383627235395612ef2a838617adbf09cba817d1acaaf)
# @version (2025-04-08)
##
declare -F sys_arch &>/dev/null || {
    # sys_arch() - Detects and matches the system CPU architecture
    #
    # Normalizes the output of `uname -m` to standard architecture labels:
    #   - "AMD64", "X86", "ARM64", "ARM", or raw value if unknown
    # Also supports simple matching against bitness or architecture terms.
    #
    # Usage:
    #   sys_arch              → prints normalized architecture (e.g. "AMD64")
    #   sys_arch 64           → returns true if 64-bit arch (e.g. x86_64, aarch64)
    #   sys_arch 32           → returns true if 32-bit arch (e.g. i386, armv7)
    #   sys_arch arm          → returns true if matches normalized label
    #
    # Return value:
    #   0 (true) if match, 1 (false) otherwise
    sys_arch() {
        local raw="$(uname -m)"
        local arch
        local bits
    
        case "$raw" in
            x86_64)   arch="AMD64"; bits=64 ;;
            i386|i486|i586|i686) arch="X86"; bits=32 ;;
            aarch64)  arch="ARM64"; bits=64 ;;
            arm*|armv7l|armv6l) arch="ARM"; bits=32 ;;
            *)        arch="$raw"; bits="" ;;
        esac
    
        [[ $# -eq 0 ]] && echo "$arch" && return
    
        local query="${1,,}"
        case "$query" in
            64|x64|amd64|arm64) [[ "$bits" == 64 || "${arch,,}" == *"$query"* ]] ;;
            32|x86|arm)         [[ "$bits" == 32 || "${arch,,}" == *"$query"* ]] ;;
            *)                  [[ "${arch,,}" == *"$query"* ]] ;;
        esac
    }}

[ "${BASH_SOURCE[0]}" = "$0" ] && sys_arch "$@"
