#!/usr/bin/env bash

##
# testing function (7829a073914716e4c1d37e5848d239135cc6ff47fe22ca0aedbeae3a2b508140)
# @version (2025-04-10)
##
declare -F testing &>/dev/null || {
    # unit testing for bash scripts
    # @see: also https://github.com/kward/shunit2
    describe() {
        declare -p TEST_ERRNO &>/dev/null || { # initialize
            declare -gxa TEST_NAME=() TEST_ERRNO=() TEST_DEPTH=() TEST_CURRENT=() TEST_ERROR=()
            declare -gx TEST_INDENT=""
            declare -A TEST_RESULTS=([good]=0 [skip]=0 [fail]=0)
            declare -gx TEST_INDENT=""
            trap describe EXIT
        }
        if [[ $# -gt 0 ]]; then # new describe block
            local name="${TEST_CURRENT+$TEST_CURRENT.}${2+"- $2"}$1"
            TEST_CURRENT=("$name" "${TEST_CURRENT[@]}")
            TEST_NAME=("$name" "${TEST_NAME[@]}")
            TEST_ERRNO=(0 "${TEST_ERRNO[@]}")
            TEST_DEPTH=($(( ${#TEST_CURRENT[@]} - 1 )) "${TEST_DEPTH[@]}")
        else # end describe block
            TEST_CURRENT=("${TEST_CURRENT[@]:1}")
            TEST_INDENT="${TEST_INDENT:1}"
        fi
    }
    it() { describe "" "$*"; }
    ti() { describe; }
    
    expect() {
        local actual="$1" operator="$2" expected="$3"
        TEST_ERRNO[0]=-1
        TEST_ERROR[0]=-1
    
        case "$operator" in
            toBe|toEqual) [[ "$actual" == "$expected" ]] && TEST_ERRNO[0]=0 ;;
            toBeLessThan) (( actual < expected )) && TEST_ERRNO[0]=0 ;;
            toBeGreaterThan) (( actual > expected )) && TEST_ERRNO[0]=0 ;;
        esac
        if (( TEST_ERRNO[0] != 0 )); then
            TEST_ERRNO[0]=$?
            "$actual"
        fi
    }
    assert(){ expect "$@"; }
    
    describe_parent_state() {
        local -i i="$1" depth="${#TEST_DEPTH[@]}" childState="$2"
        for (( ; i < depth; ++i )); do
            (( TEST_ERRNO[i] < childState )) && TEST_ERRNO[i]=$childState
            (( TEST_DEPTH[i] == 0 )) && break
        done
    }
    
    describe_summary() {
        local -i i="${#TEST_NAME[@]}" total_tests=0
        while (( --i >= 0 )); do
            local name="${TEST_NAME[i]##*.}"
            local leaf=""; [[ "${name:0:1}" == "-" ]] && leaf=1
    
            case "${TEST_ERRNO[i]}" in
                -1) [[ "$leaf" ]] && describe_parent_state "$i" -1 || (( ++TEST_RESULTS[skip] )) ;;
                0)  [[ "$leaf" ]] && describe_parent_state "$i" 0  || (( ++TEST_RESULTS[good] )) ;;
                *)  [[ "$leaf" ]] && describe_parent_state "$i" "${TEST_ERRNO[i]}" || (( ++TEST_RESULTS[fail] )) ;;
            esac
        done
    
        total_tests=$(( TEST_RESULTS[good] + TEST_RESULTS[skip] + TEST_RESULTS[fail] ))
        
        echo -en "\n$total_tests Test(s):"
        [[ ${TEST_RESULTS[skip]} -gt 0 ]] && echo -en " \033[33m${TEST_RESULTS[skip]} skipped\033[0m"
        [[ ${TEST_RESULTS[fail]} -gt 0 ]] && echo -en " \033[31m${TEST_RESULTS[fail]} failed\033[0m"
        [[ ${TEST_RESULTS[good]} -gt 0 ]] && echo -en " \033[32m${TEST_RESULTS[good]} successful\033[0m"
        echo -e "\033[0m\n"
    
        describe_results
    }
    
    describe_results() {
        local -i i="${#TEST_NAME[@]}"
        while (( --i >= 0 )); do
            local name="${TEST_NAME[i]##*.}"
            local indent="                  " && indent="${indent:0:((2 * TEST_DEPTH[i]))}"
            local bullet=""
            local leaf=$([[ "${name:0:1}" == "-" ]] && echo 1 || echo "")
    
            case "${TEST_ERRNO[i]}" in
                -1) bullet="☐" ; echo -e "\033[33m${bullet}${indent} ${name} (skipped)\033[0m" >&2 ;;
                0)  bullet="🗹" ; echo -e "\033[32m${bullet}${indent} ${name}\033[0m" >&2 ;;
                *)  bullet="☒" ; echo -e "\033[31m${bullet}${indent} ${name} ${leaf:+(failed with #${TEST_ERRNO[i]})}\033[0m" >&2 ;;
            esac
        done
    }
    
    # todo before_each
    # todo after_each
}

[ "${BASH_SOURCE[0]}" = "$0" ] && testing "$@"
